spring-cloud.version=Finchley.RELEASE

spring.application.name=ribbon-consumer
server.port=9000

management.endpoints.web.exposure.include=*

# Ribbon \u91CD\u8BD5\u673A\u5236\u914D\u7F6E\uFF0C \u4F46\u662F\u4E0D\u5DE5\u4F5C
# \u5F00\u542F\u91CD\u8BD5\u673A\u5236\uFF0C \u9ED8\u8BA4\u662F false
spring.cloud.loadbalancer.retry.enabled=true
# Max number of retries on the same server (excluding the first try)
hello-service.ribbon.MaxAutoRetries=1
# Max number of next servers to retry (excluding the first server)
hello-service.ribbon.MaxAutoRetriesNextServer=2
# Whether all operations can be retried for this client
hello-service.ribbon.OkToRetryOnAllOperations=true
# Interval to refresh the server list from the source
hello-service.ribbon.ServerListRefreshInterval=1000
# Connect timeout used by Apache HttpClient
hello-service.ribbon.ConnectTimeout=500
# Read timeout used by Apache HttpClient
hello-service.ribbon.ReadTimeout=1000

# hystrix \u914D\u7F6E
# 1. \u914D\u7F6E\u670D\u52A1\u964D\u7EA7\u662F\u5426\u5F00\u542F\uFF0C \u9ED8\u8BA4\u662Ftrue
hystrix.command.default.fallback.enabled=true

# 2. \u8BBE\u7F6E\u4F9D\u8D56\u9694\u79BB\uFF08\u6545\u969C\u9694\u79BB\uFF09\u7684\u7B56\u7565\uFF1A\u662F\u7EBF\u7A0B\u6C60\u8FD8\u662F\u4FE1\u53F7\u91CF
hystrix.command.default.execution.isolation.strategy=THREAD

# 3. \u914D\u7F6E\u662F\u5426\u542F\u7528\u8D85\u65F6\u65F6\u95F4, \u9ED8\u8BA4\u662F true
hystrix.command.default.execution.timeout.enabled=true
# \u914D\u7F6E HystrixCommand \u6267\u884C\u7684\u8D85\u65F6\u7684\u65F6\u95F4\uFF0C \u5355\u4F4D\u4E3A\u6BEB\u79D2, \u9ED8\u8BA4\u662F 1000 \u6BEB\u79D2
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=1000
# \u6267\u884C\u8D85\u65F6\u7684\u65F6\u5019\u662F\u5426\u5C06\u5B83\u4E2D\u65AD\uFF0C \u9ED8\u8BA4\u662Ftrue
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true

### 4. \u65AD\u8DEF\u5668\u914D\u7F6E
# \u8BBE\u7F6E\u6EDA\u52A8\u65F6\u95F4\u7A97\u7684\u957F\u5EA6, \u9ED8\u8BA4\u662F 10 \u79D2
hystrix.command.default.metrics.rollingStats.timeInMilliseseconds=10000
# \u5728\u6EDA\u52A8\u65F6\u95F4\u7A97\u5185\uFF0C\u8BF7\u6C42\u6570\u91CF\u8D85\u8FC7\u9608\u503C\uFF0C\u5219\u89E6\u53D1\u65AD\u8DEF\u5668\u7194\u65AD\uFF0C\u9608\u503C\u9ED8\u8BA4\u662F 20
hystrix.command.default.circuitBreaker.requestVolumeThreshold=3
# \u5728\u6EDA\u52A8\u65F6\u95F4\u7A97\u5185\uFF0C\u8BF7\u6C42\u6570\u91CF\u8D85\u8FC7 requestVolumeThreshold \u9608\u503C\u7684\u524D\u63D0\u4E0B\uFF0C \u5982\u679C\u9519\u8BEF\u8BF7\u6C42\u6570\u7684\u767E\u5206\u6BD4\u8D85\u8FC750%\uFF0C \u5219\u65AD\u8DEF\u5668\u6253\u5F00
hystrix.command.default.circuitBreaker.errorThresholdPercentage=10
# \u65AD\u8DEF\u5668\u6253\u5F00\u4E4B\u540E\u7684\u4F11\u7720\u65F6\u95F4\uFF0C\u9ED8\u8BA4\u662F 5 \u79D2, \u5F53\u4F11\u7720\u65F6\u95F4\u5230\u8FBE\u540E\uFF0C\u5C06\u518D\u6B21\u5C1D\u8BD5\u8BBF\u95EE\uFF0C\u5982\u679C\u80FD\u8BBF\u95EE\u6210\u529F\u5219\u5173\u95ED\u65AD\u8DEF\u5668
hystrix.command.default.circuitBreaker.sleepWindowInMilliseseconds=50000
# \u65AD\u8DEF\u5668\u5F3A\u5236\u6253\u5F00, \u9ED8\u8BA4\u662F false
hystrix.command.default.circuitBreaker.forceOpen=false
# \u65AD\u8DEF\u5668\u5F3A\u5236\u5173\u95ED, \u9ED8\u8BA4\u662F false
hystrix.command.default.circuitBreaker.forceClosed=false

# \u662F\u5426\u4F7F\u7528\u65AD\u8DEF\u5668\u6765\u8DDF\u8E2A\u5176\u5065\u5EB7\u6307\u6807\u548C\u7194\u65AD\u8BF7\u6C42
hystrix.command.default.circuitBreaker.enabled=true


# eureka instance \u5B9E\u4F8B\uFF0C \u8868\u793A\uFF1Aeureka server \u6216 eureka client
# lease\u79DF\u8D41expiration\u671F\u6EE1duration\u6301\u7EED\u65F6\u95F4\uFF0C\u8D85\u8FC7\u8FD9\u4E2A\u65F6\u95F4\u6CA1\u6709\u6536\u5230\u5FC3\u8DF3\u5305\uFF0Ceureka \u5B9E\u4F8B(server/client) \u5C31\u4F1A\u5C06\u8FD9\u4E2A\u5B9E\u4F8B\u5254\u9664, \u9ED8\u8BA4 90s
eureka.instance.lease-expiration-duration-in-seconds=30
# lease\u79DF\u8D41renewal\u91CD\u5EFAinterval\u95F4\u9694\uFF0Ceureka instance\u5B9E\u4F8B(server/client) \u6BCF\u9694\u8FD9\u4E2A\u65F6\u95F4\u53D1\u9001\u5FC3\u8DF3\u4E00\u6B21, \u9ED8\u8BA4 30s
eureka.instance.lease-renewal-interval-in-seconds=10
# \u4EE5IP\u5730\u5740\u4F18\u5148
eureka.instance.prefer-ip-address=true
# \u8BBE\u7F6E eureka \u5B9E\u4F8B hostname\uFF0C \u53EF\u4EE5\u4E0D\u914D\u7F6E
eureka.instance.hostname=localhost

# eureka client \u83B7\u53D6 registry (\u5B9E\u9645\u4E0A\u662FreadCacheMap)\u95F4\u9694\u65F6\u95F4\uFF08\u5237\u65B0\u7F13\u5B58\u65F6\u95F4\uFF09, \u9ED8\u8BA4 30s
eureka.client.registry-fetch-interval-seconds=10
# ribbon\u7F13\u5B58\u7684ServerList\u7684\u5237\u65B0\u95F4\u9694\uFF0C \u5237\u65B0 ribbon \u670D\u52A1\u5217\u8868, \u9ED8\u8BA4 30s
ribbon.ServerListRefreshInterval=2000

eureka-server-list=http://eureka1:1111/eureka,http://eureka2:1112/eureka
eureka.client.service-url.defaultZone=${eureka-server-list}